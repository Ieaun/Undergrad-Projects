using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Data.OleDb;


namespace Student_Administration_Design_1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            init();
        }
        //-------------------------------------------------------------------------------------------------------------

        public void GivetheBoiSOmeDeaults()
        {
            cbaddcoremodule.Items.Add("2016 Embedded Systems");
            cbaddcoremodule.Items.Add("2017 Embedded Systems");
            cbaddcoremodule.Items.Add("2018 Embedded Systems");

            cbDepartment.Items.Add("Computer Science");
            cbDepartment.Items.Add("Engineering");
            cbDepartment.Items.Add("Music");

        }
        //-------------------------------------------------------------------------------------------------------------

        public void init()
        {
            GivetheBoiSOmeDeaults();
            int Student_ID = 532631;
            string[,] StudentData = GetStudentData(Student_ID);
            for (int i = 0; i < StudentData.GetLength(0); i++)
            {
                cbModules.Items.Add(StudentData[i,0]);
                rtbSchedule.AppendText(string.Format("Module Name {0}, Module Code {1}, Grade {2}% \n",StudentData[i,0], StudentData[i, 1], StudentData[i, 2]));
            }

        }
        //-------------------------------------------------------------------------------------------------------------

        public struct Module
        {
            string Title;
            string Module_Code;
            string [] Core;          // whether this module is core to any programs, results in format "{19/Computer Science ()} , {19/Computer Science(Embedded Systems)}
            string [,] Number_of_Assesments_and_weighting;    // in the form {title1,percentage1},{title2,percetage2}  
            public Module(string title,string module_Code, string [] core, string [,] number_of_assesm)
            {
                Title = title;
                Module_Code = module_Code;
                Core = core;
                Number_of_Assesments_and_weighting = number_of_assesm;
                MessageBox.Show(string.Format("New Module [{0}] Created", Title.ToString()));
            }
        }
        //-------------------------------------------------------------------------------------------------------------

       
        //-------------------------------------------------------------------------------------------------------------

        private string[,] GetStudentData(int Student_ID)
        {
            string[,] ModuleList = GetModuleList();
            return ModuleList;
        }
        //-------------------------------------------------------------------------------------------------------------

        public struct Year
        {
            Module Module_1;  
            Module Module_2;            
            Module Module_3;             
            Module Module_4;          
            Module Module_5;              
            Module Module_6;           
            private Year(Module module_1,  Module module_2, Module module_3, Module module_4,  Module module_5, Module module_6)
            {
                Module_1 = module_1;              
                Module_2 = module_2;         
                Module_3 = module_3;              
                Module_4 = module_4;               
                Module_5 = module_5;               
                Module_6 = module_6;             
            }
        }
        //-------------------------------------------------------------------------------------------------------------


        public struct Program
        {          
            int Program_Length;
            string[] Students_Enrolled;
            Year First_Year;
            //Year Second_Year;
            //Year Third_Year;
            
            private Program(int program_Length, string[] students_enrolled,Year first_Year,Year second_Year ,Year third_Year )
            {                          
                Program_Length = program_Length;
                Students_Enrolled = students_enrolled;
                First_Year = first_Year;
                //Second_Year = second_Year;
                //Third_Year = third_Year;
            }
        }
        //-------------------------------------------------------------------------------------------------------------


        public struct Student
        {
            Program Students_Program;
            int Student_ID;
            string Student_Name;
            string Cohort; //set of students registered for a degree in a given academic year (e.g 18/Computer_Science(Embedded_Systems))
            private Student(Program student_program, int student_id,string student_name, string cohort)
            {
                Students_Program = student_program;
                Student_ID = student_id;
                Student_Name = student_name;
                Cohort = cohort;
            }
        }
        //-------------------------------------------------------------------------------------------------------------


        private string [,] GetModuleList()
        {
            string[,] ModuleList = new string[4,3];
            
            ModuleList[0,0] = "Network Security"; ModuleList[0, 1] = "50050"; ModuleList[0, 2] = "90";
            ModuleList[1,0] = "Object oriented programming"; ModuleList[1, 1] = "50051"; ModuleList[1, 2] = "76";
            ModuleList[2,0] = "Distributedd Systems"; ModuleList[2, 1] = "50052"; ModuleList[2, 2] = "49";
            ModuleList[3,0] = "Component-Based Architecture"; ModuleList[3, 1] = "50053"; ModuleList[3, 2] = "13";

            return ModuleList;
        }

        //-------------------------------------------------------------------------------------------------------------

        private void Form1_Load(object sender, EventArgs e)
        {

        }
        //-------------------------------------------------------------------------------------------------------------

        private void btnNewModule_Click(object sender, EventArgs e)
        {
            string Title = tbModuleName.ToString();
            string Module_Code = tbModuleCode.ToString();
            string[] Programs_Core;

            if (rbCoreModule.Checked)
            {
                rtbPreview.Text.Trim();
                Programs_Core = rtbPreview.Text.Split('\n'); //the core programs
            }
            else
            {
                Programs_Core = new string [1] {" "} ; //none
            }

            string[,] Number_of_Assesments_and_Weighting = new string[3, 2] {{ tbAssesment1.Text, tbWeighting1.Text },
                                                                            { tbAssesment2.Text, tbWeighting2.Text },
                                                                            { tbAssesment3.Text, tbWeighting3.Text }};

            CreateNewModule(Title,Module_Code, Programs_Core, Number_of_Assesments_and_Weighting);
        }

        public void CreateNewModule(string Title, string Module_Code, string[] Core, string[,] Number_of_Assesments_and_weighting)
        {
            Module NewModule = new Module(Title, Module_Code, Core, Number_of_Assesments_and_weighting);
            rtbStaff.AppendText(NewModule.ToString());
        }

        //-------------------------------------------------------------------------------------------------------------
        private void rbCoreModule_CheckedChanged(object sender, EventArgs e)
        {
            if (rbCoreModule.Checked)
            {
                gbCoreModule.Enabled = true;
            }
            else
            {
                gbCoreModule.Enabled = false;
            }
        }

        //-------------------------------------------------------------------------------------------------------------

        private void modulesBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();
            this.modulesBindingSource.EndEdit();
            this.tableAdapterManager.UpdateAll(this.studentsDataSet);

        }

        //-------------------------------------------------------------------------------------------------------------

        private void btnAddCoreModule_Click(object sender, EventArgs e)
        {

            string AddtoPreview = cbaddcoremodule.SelectedItem.ToString();  // get the program name from cb
            rtbPreview.AppendText(AddtoPreview +"\n");                     // add it to the rich text preview

            cbaddcoremodule.Items.Remove(cbaddcoremodule.SelectedItem);     //clear
            cbaddcoremodule.Text = "";

            rtbPreview.Text.Trim();

            string[] Programs = rtbPreview.Text.Split('\n'); //Get data already in the preview plane and split it according to new lines

            cbRemovemodule.Items.Clear();
            for (int i = 0; i <= Programs.Length-2; i++)   // programs.lenght -2 inorder to avoid the "" on other end of split
            {
                    cbRemovemodule.Items.Add(Programs[i]); // add results to other cb so users can remove any module they are not satisfied with
            }
        }

        //-------------------------------------------------------------------------------------------------------------

        private void btnRemoveCoreModule_Click(object sender, EventArgs e)
        {
            cbaddcoremodule.Items.Add(cbRemovemodule.SelectedItem);
            

            string[] Programs = rtbPreview.Text.Split('\n');
            rtbPreview.Clear();
            for (int i = 0; i <= Programs.Length - 1; i++)
            {
                string here = cbRemovemodule.SelectedItem.ToString();
                if (Programs[i] != here && Programs[i] != "" )
                {
                    rtbPreview.AppendText(Programs[i] + "\n");
                }
            }

            cbRemovemodule.Text = "";
            cbRemovemodule.Items.Remove(cbRemovemodule.SelectedItem);
            rtbPreview.Text.Trim();

        }
        //-------------------------------------------------------------------------------------------------------------

        private void tbWeighting1_TextChanged(object sender, EventArgs e)
        {
            DoWeightPercentage();
        }

        private void tbWeighting2_TextChanged(object sender, EventArgs e)
        {
            DoWeightPercentage();
        }

        private void tbWeighting3_TextChanged(object sender, EventArgs e)
        {
            DoWeightPercentage();
        }
        //-------------------------------------------------------------------------------------------------------------

        private void DoWeightPercentage()
        {
            int Percentage = 0;
            int weight1 = 0;
            int weight2 = 0;
            int weight3 = 0;

            try
            {

                if (tbWeighting1.Text != "")
                { weight1 = int.Parse(tbWeighting1.Text); }

                if (tbWeighting2.Text != "")
                { weight2 = int.Parse(tbWeighting2.Text); }

                if (tbWeighting3.Text != "")
                { weight3 = int.Parse(tbWeighting3.Text); }

                Percentage = weight1 + weight2 + weight3;

                if (Percentage >= 0 && Percentage <= 100)
                {
                    pbweight.Value = Percentage;
                }
            }
            catch (Exception)
            {

            }

        }

        //-------------------------------------------------------------------------------------------------------------

        private void initStaffGui()
        {
            cbDepartment.Text = "";

            tbModuleName.Clear();
            tbModuleCode.Clear();
            rbCoreModule.Checked = false;
            rbOptionalModule.Checked = false;
            cbaddcoremodule.Items.Clear();
            cbRemovemodule.Items.Clear();
            rtbPreview.Clear();
            tbAssesment1.Clear();
            tbAssesment2.Clear();
            tbAssesment3.Clear();
            tbWeighting1.Clear();
            tbWeighting2.Clear();
            tbWeighting3.Clear();
        }


        private void btnClear_Staff_Click(object sender, EventArgs e)
        {
            initStaffGui();
        }
        //-------------------------------------------------------------------------------------------------------------
    }
}
