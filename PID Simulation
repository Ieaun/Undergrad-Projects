import numpy as np
import matplotlib.pyplot as plt
import random
import math
from random import randrange, uniform
import time


#Subtracts the first value in the array from the total and then deletes it from the array, then adds 10th value to total
def SlidingWindow(Total,Array,New):
    Array.append(New)
    Total += Array[-1]
    Total -= Array[0]
    del Array[0]
    return Total, Array


    # Plot the axis of the recoded data
def PlotAxis(ThrustLevels,Positions,LoopList,Target,Locked,ProportionalThrust,IntegralThrust,DerivativeThrust,IntegralSum):
    XThrust= np.array(ThrustLevels)
    XPos= np.array(Positions)
    Count = np.array(LoopList)
    XProp = np.array(ProportionalThrust)
    XDer = np.array(DerivativeThrust)
    XInt = np.array(IntegralThrust)
    XIntSum = np.array(IntegralSum)


    plt.subplot(2, 3, 1)
    plt.plot(Count, XPos,label="Actual Position")
    plt.plot(Count,Target,label="Desired Position")
    plt.xlabel('X - Time (Ms)')
    plt.ylabel('Y - Position (cm)')
    plt.legend(loc='best')
    plt.title("Position")


    plt.subplot(2,3,2)
    plt.plot(Count, XThrust,label="Final Thrust")
    plt.plot(Count, Locked,label="Maximum thrust clamp")
    plt.title("Thrust levels")
    plt.xlabel('X - Time (Ms)')
    plt.ylabel('Y - Thrust Value')
    plt.legend(loc='best')

    plt.subplot(2, 3, 3)
    plt.plot(Count, XIntSum, label="Integral Sum")
    plt.xlabel('X - Time (Ms)')
    plt.ylabel('Y - Amount ')
    plt.legend(loc='best')
    plt.title("Integral Sum")

    plt.subplot(2, 3, 4)
    plt.plot(Count, XProp, label="Proportional command")
    plt.xlabel('X - Time (Ms)')
    plt.ylabel('Y - Position (cm)')
    plt.legend(loc='best')
    plt.title("Proportional Arm")

    plt.subplot(2, 3, 5)
    plt.plot(Count, XInt, label="Integral command")
    plt.xlabel('X - Time (Ms)')
    plt.ylabel('Y - Position (cm)')
    plt.legend(loc='best')
    plt.title("Integral Arm")

    plt.subplot(2, 3, 6)
    plt.plot(Count, XDer, label="Derivative command")
    plt.xlabel('X - Time (Ms)')
    plt.ylabel('Y - Position (cm)')
    plt.legend(loc='best')
    plt.title("Derivative Arm")

    plt.show()

    return


def IntegralArm(errorTerm, intergralSum, thrust, Ki):
    # test if final value needs to be clamped (over 60000)
    integralthrust = (intergralSum + errorTerm) * Ki
    preThrust = thrust + integralthrust
    Clamped, preThrust = Clamp(preThrust,errorTerm)

    if (errorTerm >= 0 and errorTerm <= 1) == False and Clamped == 1:
        # add value to sum, keep the test integral thrust
        intergralSum += errorTerm
        thrust += integralthrust
    elif (errorTerm >= 0 and errorTerm <= 1) == False and Clamped == 0:
        # uses previous integralSUm/ does not add new error value
        integralthrust = intergralSum * Ki
        thrust = preThrust

    return thrust, Clamped, integralthrust, intergralSum


# max thrust/ so clamp / conditional intergration, the controller shuts down intergration if it meets these conditions
def Clamp(thrust,error):
    Saturating,SignsEqual = False ,False
    currentThrust = thrust

    #limit
    if thrust >= 2500:
        thrust = 2500

    if thrust <= 0:
        thrust = 0

    #if true then no saturation taking place/ not at max thrust
    if currentThrust == thrust:
        Saturating = False
    else:
        Saturating = True

    #if both positive then integrator tries to make more positive, if both negative then intergator tries to make more negative|| if both same sign
    if (thrust > 0 and error > 0) or (thrust < 0 and error < 0):
        SignsEqual = True
    else:
        SignsEqual = False

        # if saturating and attempting to make values worse then intergator must be turned off
    if (SignsEqual == True) and (Saturating == True):
        return 0, thrust   #Stop Using
    else:
        return 1, thrust  #Carry on

def ProportionalArm(errorTerm, thrustp, Kp):
    '''Increase/Decrease proppelor speed'''
    thrustp = errorTerm * Kp
    return thrustp


# initialise the starting position
def Calibrate():
    Array = [20, 23, 20, 21, 23, 14, 20, 20, 14, 20, 20, 30, 24, 20, 30, 20, 10, 20, 20, 20, 20, 20, 20, 50, 20, 20,
             20, 20, 20, 20, 20, 20, 10, 20, 10, 20, 20, 20, 24, 25, 26, 27, 23, 20, 14, 16, 23, 20, 22, 25]
    Total = 0
    ArrayValues = []
    Totals = []
    for i in range(50):
        if i >= 10:
            Totals.append(Total)
            NewValue = Array[i]
            Total, ArrayValues = SlidingWindow(Total, ArrayValues, NewValue)
        else:
            Total += Array[i]
            ArrayValues.append(Array[i])
    return (sum(Totals) / len(Totals)) / 10


def DerivativeRateofChange(errorTerm, PreviousError,Destination):
    RateofChange = PreviousError - errorTerm
    return RateofChange


def CalculateCommand(Destination, Currentposition, LoopCounter, PreviousError, intergralSum,ProportionalThrust,IntegralThrust,DerivativeThrust,IntegralSum):
    LoopCounter += 1
    Ki = 0.1
    Kd = 5
    Kp = 10
    Thrust = 0

    error = Destination - Currentposition

    proportionalthrust = ProportionalArm(error, Thrust, Kp)
    Thrust += proportionalthrust
    if PreviousError != 0:
        RateOchange = DerivativeRateofChange(error, PreviousError,Destination)
        derivativethrust = RateOchange * Kd
        Thrust +=derivativethrust
    else:
        RateOchange = 0
        derivativethrust = 0

    PreviousError = error

    Thrust, IntCLamp, integralthrust, intergralSum = IntegralArm( error, intergralSum, Thrust, Ki)
    ProportionalThrust.append(proportionalthrust)
    DerivativeThrust.append(derivativethrust)
    IntegralThrust.append(integralthrust)
    IntegralSum.append(intergralSum)

    print("Thrust:", round(Thrust, 1), " Error:", round(error, 1), " Propor", round(proportionalthrust, 1),
          " Deriv", round(derivativethrust, 1), " Integral", round(integralthrust, 1), " Integral Sum:",
          round(intergralSum, 1), " Clamped:", IntCLamp," Rate of change:",RateOchange)
    return False, Thrust, LoopCounter, PreviousError, intergralSum,ProportionalThrust,IntegralThrust,DerivativeThrust,IntegralSum

def MovementEmulation(Thrust):
    if Thrust > 2400:
        Move = 5
    if Thrust > 2200 and Thrust <= 2400:
        Move = 4
    if Thrust > 2000 and Thrust <= 2200:
        Move = 2
    if Thrust > 1800 and Thrust <= 2000:
        Move = 1.25
    if Thrust > 2200 and Thrust <= 2400:
        Move = 1
    if Thrust > 2000 and Thrust <= 2200:
        Move = 0.7
    if Thrust > 1800 and Thrust <= 2000:
        Move = 0.5
    if Thrust > 1600 and Thrust <= 1800:
        Move = 0.3
    if Thrust > 1400 and Thrust <= 1600:
        Move = 0.25
    if Thrust > 1200 and Thrust <= 1400:
        Move = -0.25
    if Thrust > 1000 and Thrust <= 1200:
        Move = -0.3
    if Thrust > 800 and Thrust <= 1000:
        Move = -0.5
    if Thrust > 600 and Thrust <= 800:
        Move = -1
    if Thrust > 400 and Thrust <= 600:
        Move = -1.25
    if Thrust > 200 and Thrust <= 400:
        Move = -2
    if Thrust > 0 and Thrust <= 200:
        Move = -4
    if Thrust <= 0:
        Move = -5
    return Move

destination = int(input("Enter Destination"))

Thrust = 0
LoopCounter = 0
TargetAchieved = False
Position = Calibrate()
ThrustLevels = []
Positions = []
LoopList = []
DerivativeThrust = []
IntegralThrust = []
ProportionalThrust = []
IntegralSum = []
PreviousError = 0
intergralSum = 0


while TargetAchieved == False:
    ThrustLevels.append(Thrust)
    Positions.append(Position)
    LoopList.append(LoopCounter)
    print("Thrust:", Thrust, " Loop Counter:", LoopCounter, " Position", Position)
    # Position = Calibrate()############
    TargetAchieved, Thrust, LoopCounter, PreviousError, intergralSum,ProportionalThrust,IntegralThrust,DerivativeThrust,IntegralSum = CalculateCommand(destination, Position,LoopCounter,PreviousError, intergralSum,ProportionalThrust,IntegralThrust,DerivativeThrust,IntegralSum)
    Position += MovementEmulation(Thrust)
    if LoopCounter >= 1000:
        print("LoopCounter Break")
        break

Target = []
Locked = []
for i in range(LoopCounter):
    Target.append(destination)
    Locked.append(4500)

PlotAxis(ThrustLevels, Positions, LoopList, Target, Locked,ProportionalThrust,IntegralThrust,DerivativeThrust,IntegralSum)
